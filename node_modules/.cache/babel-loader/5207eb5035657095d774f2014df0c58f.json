{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @fileoverview Slide component that given a slide type and its data renders it\n * along with its title and description.\n */\nimport GenericSlide from './Generic';\nimport React from 'react';\n\nvar VideoSlide = /*#__PURE__*/function (_GenericSlide) {\n  _inherits(VideoSlide, _GenericSlide);\n\n  var _super = _createSuper(VideoSlide);\n\n  function VideoSlide(props) {\n    var _this;\n\n    _classCallCheck(this, VideoSlide);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"playVideo\", function () {\n      // You can use the play method as normal on your video ref\n      _this.refs.video.play();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadVideo\", function () {\n      // Pause as well\n      _this.refs.video.load();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stop\", function () {\n      if (_this.video) {\n        _this.loadVideo();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"play\", function () {\n      if (_this.video) {\n        _this.playVideo();\n      }\n    });\n\n    _this.video = React.createRef();\n    return _this;\n  }\n\n  _createClass(VideoSlide, [{\n    key: \"renderSlideContent\",\n\n    /**\n     * Renders the inner content of the slide (ex. the photo, youtube iframe,video, etc)\n     * @param {string} data The slide's data (usually a URL or object ID)\n     * @returns {Component}\n     */\n    value: function renderSlideContent(data) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"video-content\"\n      }, /*#__PURE__*/React.createElement(\"video\", {\n        width: \"100%\",\n        height: \"auto\",\n        ref: \"video\",\n        src: data\n      }));\n    }\n    /**\n     * Stops the slide's content from playing when the slide is out of focus\n     */\n\n  }]);\n\n  return VideoSlide;\n}(GenericSlide);\n\nexport default VideoSlide;","map":{"version":3,"sources":["C:/Users/82103/Desktop/digitalsignage-master/widgets/slideshow/src/Slide/video.js"],"names":["GenericSlide","React","VideoSlide","props","refs","video","play","load","loadVideo","playVideo","createRef","data"],"mappings":";;;;;;;;;;;;;AAAA;;;;AAKA,OAAOA,YAAP,MAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAGMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,gEAKH,YAAM;AAChB;AACA,YAAKC,IAAL,CAAUC,KAAV,CAAgBC,IAAhB;AACD,KARc;;AAAA,gEAUH,YAAM;AAChB;AACA,YAAKF,IAAL,CAAUC,KAAV,CAAgBE,IAAhB;AACD,KAbc;;AAAA,2DAqCZ,YAAM;AACX,UAAG,MAAKF,KAAR,EAAc;AACZ,cAAKG,SAAL;AACD;AACF,KAzCkB;;AAAA,2DA8CX,YAAM;AACX,UAAI,MAAKH,KAAT,EAAiB;AACb,cAAKI,SAAL;AACD;AACJ,KAlDiB;;AAEjB,UAAKJ,KAAL,GAAaJ,KAAK,CAACS,SAAN,EAAb;AAFiB;AAGlB;;;;;AAaD;;;;;uCAKmBC,I,EAAM;AACvB,0BACE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACM;AACA,QAAA,KAAK,EAAC,MADN;AAEA,QAAA,MAAM,EAAC,MAFP;AAGE,QAAA,GAAG,EAAC,OAHN;AAIE,QAAA,GAAG,EAAEA;AAJP,QADN,CADF;AAUD;AAED;;;;;;;EAnCuBX,Y;;AAsDzB,eAAeE,UAAf","sourcesContent":["/**\n * @fileoverview Slide component that given a slide type and its data renders it\n * along with its title and description.\n */\n\nimport GenericSlide from './Generic'\nimport React from 'react'\n\n\nclass VideoSlide extends GenericSlide {\n  constructor(props) {\n    super(props)\n    this.video = React.createRef()\n  }\n\n      playVideo = () => {\n        // You can use the play method as normal on your video ref\n        this.refs.video.play();\n      };\n\n      loadVideo = () => {\n        // Pause as well\n        this.refs.video.load();\n      };\n\n\n  /**\n   * Renders the inner content of the slide (ex. the photo, youtube iframe,video, etc)\n   * @param {string} data The slide's data (usually a URL or object ID)\n   * @returns {Component}\n   */\n  renderSlideContent(data) {\n    return (\n      <div className='video-content'>\n            <video\n            width='100%'\n            height='auto'\n              ref=\"video\"\n              src={data}\n            />\n          </div>\n    )\n  }\n\n  /**\n   * Stops the slide's content from playing when the slide is out of focus\n   */\n  stop = () => {\n    if(this.video){\n      this.loadVideo();\n    }\n  }\n\n  /**\n   * Starts or resumes the slide's content when the slide is in focus\n   */\n   play = () => {\n     if (this.video ) {\n         this.playVideo()\n       }\n   }\n}\n\nexport default VideoSlide\n"]},"metadata":{},"sourceType":"module"}