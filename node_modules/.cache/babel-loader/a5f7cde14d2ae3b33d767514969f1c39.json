{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n/*\n * A simple HOC that provides facility for listening to container resizes.\n */\n\nexport default function WidthProvider(ComposedComponent) {\n  return /*#__PURE__*/function (_React$Component) {\n    _inherits(WidthProvider, _React$Component);\n\n    var _super = _createSuper(WidthProvider);\n\n    function WidthProvider(props) {\n      var _this;\n\n      _classCallCheck(this, WidthProvider);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"onWindowResize\", function () {\n        if (!_this.mounted) return; // eslint-disable-next-line\n\n        var node = ReactDOM.findDOMNode(_assertThisInitialized(_this)); // Flow casts this to Text | Element\n\n        if (node instanceof HTMLElement) _this.setState({\n          width: node.offsetWidth\n        });\n      });\n\n      _this.state = {\n        width: 1280\n      };\n      _this.mounted = false;\n      return _this;\n    }\n\n    _createClass(WidthProvider, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.mounted = true;\n        window.addEventListener('resize', this.onWindowResize);\n        this.onWindowResize();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.onWindowResize);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            _this$props$measureBe = _this$props.measureBeforeMount,\n            measureBeforeMount = _this$props$measureBe === void 0 ? false : _this$props$measureBe,\n            rest = _objectWithoutProperties(_this$props, [\"measureBeforeMount\"]);\n\n        if (measureBeforeMount && !this.mounted) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: this.props.className,\n            style: this.props.style\n          });\n        }\n\n        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, rest, {\n          width: this.state.width,\n          rowHeight: this.state.width / rest.cols - 10\n        }));\n      }\n    }]);\n\n    return WidthProvider;\n  }(React.Component);\n}","map":{"version":3,"sources":["C:/Users/82103/Desktop/digitalsignage-master/components/Widgets/WidthProvider.js"],"names":["ReactDOM","React","WidthProvider","ComposedComponent","props","mounted","node","findDOMNode","HTMLElement","setState","width","offsetWidth","state","window","addEventListener","onWindowResize","removeEventListener","measureBeforeMount","rest","className","style","rowHeight","cols","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;;;;AAGA,eAAe,SAASC,aAAT,CAAuBC,iBAAvB,EAA0C;AACvD;AAAA;;AAAA;;AACE,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;;AADiB,uEAqBF,YAAM;AACrB,YAAI,CAAC,MAAKC,OAAV,EAAmB,OADE,CAErB;;AACA,YAAMC,IAAI,GAAGN,QAAQ,CAACO,WAAT,+BAAb,CAHqB,CAGmB;;AACxC,YAAID,IAAI,YAAYE,WAApB,EAAiC,MAAKC,QAAL,CAAc;AAAEC,UAAAA,KAAK,EAAEJ,IAAI,CAACK;AAAd,SAAd;AAClC,OA1BkB;;AAEjB,YAAKC,KAAL,GAAa;AACXF,QAAAA,KAAK,EAAE;AADI,OAAb;AAIA,YAAKL,OAAL,GAAe,KAAf;AANiB;AAOlB;;AARH;AAAA;AAAA,0CAUsB;AAClB,aAAKA,OAAL,GAAe,IAAf;AAEAQ,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,cAAvC;AACA,aAAKA,cAAL;AACD;AAfH;AAAA;AAAA,6CAiByB;AACrB,aAAKV,OAAL,GAAe,KAAf;AACAQ,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,cAA1C;AACD;AApBH;AAAA;AAAA,+BA6BW;AAAA,0BACyC,KAAKX,KAD9C;AAAA,gDACCa,kBADD;AAAA,YACCA,kBADD,sCACsB,KADtB;AAAA,YACgCC,IADhC;;AAEP,YAAID,kBAAkB,IAAI,CAAC,KAAKZ,OAAhC,EAAyC;AACvC,8BAAO;AAAK,YAAA,SAAS,EAAE,KAAKD,KAAL,CAAWe,SAA3B;AAAsC,YAAA,KAAK,EAAE,KAAKf,KAAL,CAAWgB;AAAxD,YAAP;AACD;;AAED,4BACE,oBAAC,iBAAD,eACMF,IADN,EAEM;AAAER,UAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KAApB;AAA2BW,UAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWF,KAAX,GAAmBQ,IAAI,CAACI,IAAxB,GAA+B;AAArE,SAFN,EADF;AAMD;AAzCH;;AAAA;AAAA,IAAmCrB,KAAK,CAACsB,SAAzC;AA2CD","sourcesContent":["import ReactDOM from 'react-dom'\nimport React from 'react'\n\n/*\n * A simple HOC that provides facility for listening to container resizes.\n */\nexport default function WidthProvider(ComposedComponent) {\n  return class WidthProvider extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        width: 1280\n      }\n\n      this.mounted = false\n    }\n\n    componentDidMount() {\n      this.mounted = true\n\n      window.addEventListener('resize', this.onWindowResize)\n      this.onWindowResize()\n    }\n\n    componentWillUnmount() {\n      this.mounted = false\n      window.removeEventListener('resize', this.onWindowResize)\n    }\n\n    onWindowResize = () => {\n      if (!this.mounted) return\n      // eslint-disable-next-line\n      const node = ReactDOM.findDOMNode(this) // Flow casts this to Text | Element\n      if (node instanceof HTMLElement) this.setState({ width: node.offsetWidth })\n    }\n\n    render() {\n      const { measureBeforeMount = false, ...rest } = this.props\n      if (measureBeforeMount && !this.mounted) {\n        return <div className={this.props.className} style={this.props.style} />\n      }\n\n      return (\n        <ComposedComponent\n          {...rest}\n          {...{ width: this.state.width, rowHeight: this.state.width / rest.cols - 10 }}\n        />\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}