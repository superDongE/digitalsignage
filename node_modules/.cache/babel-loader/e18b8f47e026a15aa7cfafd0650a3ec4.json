{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n/*\n * A simple HOC that provides facility for listening to container resizes.\n */\n\nexport default function HeightProvider(ComposedComponent, MeasureComponent) {\n  var layout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'spaced';\n  return /*#__PURE__*/function (_React$Component) {\n    _inherits(HeightProvider, _React$Component);\n\n    var _super = _createSuper(HeightProvider);\n\n    function HeightProvider(props) {\n      var _this;\n\n      _classCallCheck(this, HeightProvider);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"onWindowResize\", function () {\n        if (!_this.mounted) return; // eslint-disable-next-line\n\n        var node = ReactDOM.findDOMNode(MeasureComponent);\n\n        if (node instanceof HTMLElement) {\n          _this.setState({\n            width: node.offsetWidth,\n            height: node.offsetHeight\n          });\n        }\n      });\n\n      _this.state = {\n        width: 1280,\n        height: 720\n      };\n      _this.mounted = false;\n      return _this;\n    }\n\n    _createClass(HeightProvider, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.mounted = true;\n        window.addEventListener('resize', this.onWindowResize);\n        this.onWindowResize();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.onWindowResize);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            _this$props$measureBe = _this$props.measureBeforeMount,\n            measureBeforeMount = _this$props$measureBe === void 0 ? false : _this$props$measureBe,\n            rest = _objectWithoutProperties(_this$props, [\"measureBeforeMount\"]);\n\n        if (measureBeforeMount && !this.mounted) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: this.props.className,\n            style: this.props.style\n          });\n        }\n\n        var rowNum = Math.max.apply(Math, rest.layout.map(function (widget) {\n          return widget.y + widget.h;\n        })) || 12;\n        var colNum = Math.max.apply(Math, rest.layout.map(function (widget) {\n          return widget.x + widget.w;\n        })) || 12;\n        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, rest, {\n          width: this.state.width,\n          rowHeight: this.state.height / rowNum - (layout == 'spaced' ? 10 : 0),\n          cols: colNum\n        }));\n      }\n    }]);\n\n    return HeightProvider;\n  }(React.Component);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/digitalsignage-master/components/Widgets/HeightProvider.js"],"names":["ReactDOM","React","HeightProvider","ComposedComponent","MeasureComponent","layout","props","mounted","node","findDOMNode","HTMLElement","setState","width","offsetWidth","height","offsetHeight","state","window","addEventListener","onWindowResize","removeEventListener","measureBeforeMount","rest","className","style","rowNum","Math","max","apply","map","widget","y","h","colNum","x","w","rowHeight","cols","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;;;;AAGA,eAAe,SAASC,cAAT,CAAwBC,iBAAxB,EAA2CC,gBAA3C,EAAgF;AAAA,MAAnBC,MAAmB,uEAAV,QAAU;AAC7F;AAAA;;AAAA;;AACE,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gCAAMA,KAAN;;AADiB,uEAsBF,YAAM;AACrB,YAAI,CAAC,MAAKC,OAAV,EAAmB,OADE,CAErB;;AACA,YAAMC,IAAI,GAAGR,QAAQ,CAACS,WAAT,CAAqBL,gBAArB,CAAb;;AACA,YAAII,IAAI,YAAYE,WAApB,EAAiC;AAC/B,gBAAKC,QAAL,CAAc;AAAEC,YAAAA,KAAK,EAAEJ,IAAI,CAACK,WAAd;AAA2BC,YAAAA,MAAM,EAAEN,IAAI,CAACO;AAAxC,WAAd;AACD;AACF,OA7BkB;;AAEjB,YAAKC,KAAL,GAAa;AACXJ,QAAAA,KAAK,EAAE,IADI;AAEXE,QAAAA,MAAM,EAAE;AAFG,OAAb;AAKA,YAAKP,OAAL,GAAe,KAAf;AAPiB;AAQlB;;AATH;AAAA;AAAA,0CAWsB;AAClB,aAAKA,OAAL,GAAe,IAAf;AAEAU,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,cAAvC;AACA,aAAKA,cAAL;AACD;AAhBH;AAAA;AAAA,6CAkByB;AACrB,aAAKZ,OAAL,GAAe,KAAf;AACAU,QAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,cAA1C;AACD;AArBH;AAAA;AAAA,+BAgCW;AAAA,0BACyC,KAAKb,KAD9C;AAAA,gDACCe,kBADD;AAAA,YACCA,kBADD,sCACsB,KADtB;AAAA,YACgCC,IADhC;;AAEP,YAAID,kBAAkB,IAAI,CAAC,KAAKd,OAAhC,EAAyC;AACvC,8BAAO;AAAK,YAAA,SAAS,EAAE,KAAKD,KAAL,CAAWiB,SAA3B;AAAsC,YAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWkB;AAAxD,YAAP;AACD;;AAED,YAAMC,MAAM,GACVC,IAAI,CAACC,GAAL,CAASC,KAAT,CACEF,IADF,EAEEJ,IAAI,CAACjB,MAAL,CAAYwB,GAAZ,CAAgB,UAAAC,MAAM,EAAI;AACxB,iBAAOA,MAAM,CAACC,CAAP,GAAWD,MAAM,CAACE,CAAzB;AACD,SAFD,CAFF,KAKK,EANP;AAQA,YAAMC,MAAM,GACVP,IAAI,CAACC,GAAL,CAASC,KAAT,CACEF,IADF,EAEEJ,IAAI,CAACjB,MAAL,CAAYwB,GAAZ,CAAgB,UAAAC,MAAM,EAAI;AACxB,iBAAOA,MAAM,CAACI,CAAP,GAAWJ,MAAM,CAACK,CAAzB;AACD,SAFD,CAFF,KAKK,EANP;AAQA,4BACE,oBAAC,iBAAD,eACMb,IADN,EAEM;AACFV,UAAAA,KAAK,EAAE,KAAKI,KAAL,CAAWJ,KADhB;AAEFwB,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWF,MAAX,GAAoBW,MAApB,IAA8BpB,MAAM,IAAI,QAAV,GAAqB,EAArB,GAA0B,CAAxD,CAFT;AAGFgC,UAAAA,IAAI,EAAEJ;AAHJ,SAFN,EADF;AAUD;AAhEH;;AAAA;AAAA,IAAoChC,KAAK,CAACqC,SAA1C;AAkED","sourcesContent":["import ReactDOM from 'react-dom'\nimport React from 'react'\n\n/*\n * A simple HOC that provides facility for listening to container resizes.\n */\nexport default function HeightProvider(ComposedComponent, MeasureComponent, layout = 'spaced') {\n  return class HeightProvider extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        width: 1280,\n        height: 720\n      }\n\n      this.mounted = false\n    }\n\n    componentDidMount() {\n      this.mounted = true\n\n      window.addEventListener('resize', this.onWindowResize)\n      this.onWindowResize()\n    }\n\n    componentWillUnmount() {\n      this.mounted = false\n      window.removeEventListener('resize', this.onWindowResize)\n    }\n\n    onWindowResize = () => {\n      if (!this.mounted) return\n      // eslint-disable-next-line\n      const node = ReactDOM.findDOMNode(MeasureComponent)\n      if (node instanceof HTMLElement) {\n        this.setState({ width: node.offsetWidth, height: node.offsetHeight })\n      }\n    }\n\n    render() {\n      const { measureBeforeMount = false, ...rest } = this.props\n      if (measureBeforeMount && !this.mounted) {\n        return <div className={this.props.className} style={this.props.style} />\n      }\n\n      const rowNum =\n        Math.max.apply(\n          Math,\n          rest.layout.map(widget => {\n            return widget.y + widget.h\n          })\n        ) || 12\n\n      const colNum =\n        Math.max.apply(\n          Math,\n          rest.layout.map(widget => {\n            return widget.x + widget.w\n          })\n        ) || 12\n\n      return (\n        <ComposedComponent\n          {...rest}\n          {...{\n            width: this.state.width,\n            rowHeight: this.state.height / rowNum - (layout == 'spaced' ? 10 : 0),\n            cols: colNum\n          }}\n        />\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}