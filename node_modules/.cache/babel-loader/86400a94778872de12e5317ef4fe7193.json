{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport _ from 'lodash';\nimport Dialog from '../Dialog';\nimport { Form, Input, Button, ButtonGroup } from '../Form';\nimport { getSlide, addSlide, updateSlide } from '../../actions/slide';\n\nvar SlideEditDialog = /*#__PURE__*/function (_React$Component) {\n  _inherits(SlideEditDialog, _React$Component);\n\n  var _super = _createSuper(SlideEditDialog);\n\n  function SlideEditDialog(props) {\n    var _this;\n\n    _classCallCheck(this, SlideEditDialog);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"refresh\", function () {\n      var _this$props = _this.props,\n          slide = _this$props.slide,\n          upload = _this$props.upload;\n\n      if (slide) {\n        return getSlide(slide).then(function (data) {\n          _this.setState(_objectSpread({\n            data: undefined,\n            title: undefined,\n            description: undefined,\n            type: undefined,\n            duration: undefined\n          }, data, {\n            upload: upload\n          }, upload ? {\n            type: 'video'\n          } : {}));\n        });\n      } else {\n        _this.setState(_objectSpread({\n          data: undefined,\n          title: undefined,\n          description: undefined,\n          type: undefined,\n          duration: undefined,\n          upload: upload\n        }, upload ? {\n          type: 'video'\n        } : {}));\n\n        return _Promise.resolve();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"open\", function () {\n      _this.refresh();\n\n      _this.dialog && _this.dialog.open();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      var refresh = _this.props.refresh;\n      _this.dialog && _this.dialog.close();\n      if (refresh) return refresh();\n      return _Promise.resolve();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (name, value) {\n      _this.setState(_objectSpread(_defineProperty({}, name, value), name == 'type' ? {\n        data: ''\n      } : {}));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"save\", function () {\n      var _this$props2 = _this.props,\n          slide = _this$props2.slide,\n          slideshow = _this$props2.slideshow;\n\n      var _this$state = _this.state,\n          upload = _this$state.upload,\n          otherProps = _objectWithoutProperties(_this$state, [\"upload\"]);\n\n      if (slideshow) {\n        return addSlide(slideshow, upload, _.pickBy(otherProps, function (v) {\n          return v !== undefined;\n        })).then(function () {\n          _this.close();\n        });\n      } else {\n        return updateSlide(slide, upload, _.pickBy(otherProps, function (v) {\n          return v !== undefined;\n        })).then(function () {\n          _this.close();\n        });\n      }\n    });\n\n    _this.state = _objectSpread({\n      upload: props.upload\n    }, props.upload ? {\n      type: 'video'\n    } : {});\n    return _this;\n  }\n\n  _createClass(SlideEditDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.refresh();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.upload != prevProps.upload) {\n        this.setState(_objectSpread({\n          upload: this.props.upload\n        }, this.props.upload ? {} : {}));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          title = _this$state2.title,\n          description = _this$state2.description,\n          duration = _this$state2.duration,\n          _this$state2$type = _this$state2.type,\n          type = _this$state2$type === void 0 ? 'video' : _this$state2$type,\n          upload = _this$state2.upload;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        ref: function ref(_ref) {\n          return _this2.dialog = _ref;\n        }\n      }, /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        name: 'type',\n        label: 'Slide Type',\n        value: type,\n        choices: [{\n          id: 'youtube',\n          label: 'Youtube Video'\n        }, {\n          id: 'web',\n          label: 'Web Page'\n        }, {\n          id: 'photo',\n          label: 'Photo'\n        }, {\n          id: 'video',\n          label: 'video'\n        }],\n        onChange: this.handleChange\n      }), type == 'photo' || upload ? /*#__PURE__*/React.createElement(Input, {\n        type: 'photo',\n        label: 'photo',\n        name: 'upload',\n        value: upload ? upload.preview : data,\n        onChange: this.handleChange,\n        inline: true\n      }) : type == 'video' || upload ? /*#__PURE__*/React.createElement(Input, {\n        type: 'video',\n        label: 'video',\n        name: 'upload',\n        value: upload ? upload.preview : data,\n        onChange: this.handleChange,\n        inline: true\n      }) : /*#__PURE__*/React.createElement(Input, {\n        type: 'text',\n        label: type == 'web' ? 'Web URL' : type == 'youtube' ? 'Youtube URL' : 'Data',\n        name: 'data',\n        value: data,\n        onChange: this.handleChange\n      }), /*#__PURE__*/React.createElement(Input, {\n        type: 'number',\n        label: 'Duration',\n        name: 'duration',\n        value: duration,\n        placeholder: '5',\n        onChange: this.handleChange\n      }), /*#__PURE__*/React.createElement(Input, {\n        type: 'text',\n        label: 'Title',\n        name: 'title',\n        value: title,\n        placeholder: 'Header title...',\n        onChange: this.handleChange\n      }), /*#__PURE__*/React.createElement(Input, {\n        type: 'textarea',\n        label: 'Description',\n        name: 'description',\n        value: description,\n        placeholder: 'Short content description...',\n        onChange: this.handleChange\n      })), /*#__PURE__*/React.createElement(ButtonGroup, null, /*#__PURE__*/React.createElement(Button, {\n        text: 'Save',\n        color: '#8bc34a',\n        onClick: this.save\n      }), /*#__PURE__*/React.createElement(Button, {\n        text: 'Cancel',\n        color: '#e85454',\n        onClick: this.close\n      })));\n    }\n  }]);\n\n  return SlideEditDialog;\n}(React.Component);\n\nexport default SlideEditDialog;","map":{"version":3,"sources":["C:/Users/user/Desktop/digitalsignage-master/components/Admin/SlideEditDialog.js"],"names":["React","_","Dialog","Form","Input","Button","ButtonGroup","getSlide","addSlide","updateSlide","SlideEditDialog","props","slide","upload","then","data","setState","undefined","title","description","type","duration","resolve","refresh","dialog","open","close","name","value","slideshow","state","otherProps","pickBy","v","prevProps","ref","id","label","handleChange","preview","save","Component"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,WAA9B,QAAiD,SAAjD;AAEA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,QAAgD,qBAAhD;;IAEMC,e;;;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,8DAsBT,YAAM;AAAA,wBACY,MAAKA,KADjB;AAAA,UACNC,KADM,eACNA,KADM;AAAA,UACCC,MADD,eACCA,MADD;;AAEd,UAAID,KAAJ,EAAW;AACT,eAAOL,QAAQ,CAACK,KAAD,CAAR,CAAgBE,IAAhB,CAAqB,UAAAC,IAAI,EAAI;AAClC,gBAAKC,QAAL;AACED,YAAAA,IAAI,EAAEE,SADR;AAEEC,YAAAA,KAAK,EAAED,SAFT;AAGEE,YAAAA,WAAW,EAAEF,SAHf;AAIEG,YAAAA,IAAI,EAAEH,SAJR;AAKEI,YAAAA,QAAQ,EAAEJ;AALZ,aAMKF,IANL;AAOEF,YAAAA,MAAM,EAANA;AAPF,aAQMA,MAAM,GAAG;AAAEO,YAAAA,IAAI,EAAC;AAAP,WAAH,GAAqB,EARjC;AAUD,SAXM,CAAP;AAYD,OAbD,MAaO;AACL,cAAKJ,QAAL;AACED,UAAAA,IAAI,EAAEE,SADR;AAEEC,UAAAA,KAAK,EAAED,SAFT;AAGEE,UAAAA,WAAW,EAAEF,SAHf;AAIEG,UAAAA,IAAI,EAAEH,SAJR;AAKEI,UAAAA,QAAQ,EAAEJ,SALZ;AAMEJ,UAAAA,MAAM,EAANA;AANF,WAOMA,MAAM,GAAG;AAAEO,UAAAA,IAAI,EAAC;AAAP,SAAH,GAAsB,EAPlC;;AASA,eAAO,SAAQE,OAAR,EAAP;AACD;AACF,KAjDkB;;AAAA,2DAoDZ,YAAM;AACX,YAAKC,OAAL;;AACA,YAAKC,MAAL,IAAe,MAAKA,MAAL,CAAYC,IAAZ,EAAf;AACD,KAvDkB;;AAAA,4DAyDX,YAAM;AAAA,UACJF,OADI,GACQ,MAAKZ,KADb,CACJY,OADI;AAEZ,YAAKC,MAAL,IAAe,MAAKA,MAAL,CAAYE,KAAZ,EAAf;AACA,UAAIH,OAAJ,EAAa,OAAOA,OAAO,EAAd;AACb,aAAO,SAAQD,OAAR,EAAP;AACD,KA9DkB;;AAAA,mEAgEJ,UAACK,IAAD,EAAOC,KAAP,EAAiB;AAC9B,YAAKZ,QAAL,mCACGW,IADH,EACUC,KADV,GAGMD,IAAI,IAAI,MAAR,GAAiB;AAAEZ,QAAAA,IAAI,EAAE;AAAR,OAAjB,GAAgC,EAHtC;AAKD,KAtEkB;;AAAA,2DAwEZ,YAAM;AAAA,yBACkB,MAAKJ,KADvB;AAAA,UACHC,KADG,gBACHA,KADG;AAAA,UACIiB,SADJ,gBACIA,SADJ;;AAAA,wBAEuB,MAAKC,KAF5B;AAAA,UAEHjB,MAFG,eAEHA,MAFG;AAAA,UAEQkB,UAFR;;AAGX,UAAIF,SAAJ,EAAe;AACb,eAAOrB,QAAQ,CAACqB,SAAD,EAAYhB,MAAZ,EAAoBZ,CAAC,CAAC+B,MAAF,CAASD,UAAT,EAAqB,UAAAE,CAAC;AAAA,iBAAIA,CAAC,KAAKhB,SAAV;AAAA,SAAtB,CAApB,CAAR,CAAwEH,IAAxE,CAA6E,YAAM;AACxF,gBAAKY,KAAL;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAOjB,WAAW,CAACG,KAAD,EAAQC,MAAR,EAAgBZ,CAAC,CAAC+B,MAAF,CAASD,UAAT,EAAqB,UAAAE,CAAC;AAAA,iBAAIA,CAAC,KAAKhB,SAAV;AAAA,SAAtB,CAAhB,CAAX,CAAuEH,IAAvE,CAA4E,YAAM;AACvF,gBAAKY,KAAL;AACD,SAFM,CAAP;AAGD;AACF,KApFkB;;AAGjB,UAAKI,KAAL;AACEjB,MAAAA,MAAM,EAAEF,KAAK,CAACE;AADhB,OAEMF,KAAK,CAACE,MAAN,GAAe;AAAEO,MAAAA,IAAI,EAAC;AAAP,KAAf,GAAiC,EAFvC;AAHiB;AAOlB;;;;wCAEmB;AAClB,WAAKG,OAAL;AACD;;;uCAEkBW,S,EAAW;AAC5B,UAAI,KAAKvB,KAAL,CAAWE,MAAX,IAAqBqB,SAAS,CAACrB,MAAnC,EAA2C;AACzC,aAAKG,QAAL;AACEH,UAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE;AADrB,WAEM,KAAKF,KAAL,CAAWE,MAAX,GAAoB,EAApB,GAAyB,EAF/B;AAID;AACF;;;6BAkEQ;AAAA;;AAAA,yBACgE,KAAKiB,KADrE;AAAA,UACCf,IADD,gBACCA,IADD;AAAA,UACOG,KADP,gBACOA,KADP;AAAA,UACcC,WADd,gBACcA,WADd;AAAA,UAC2BE,QAD3B,gBAC2BA,QAD3B;AAAA,2CACqCD,IADrC;AAAA,UACqCA,IADrC,kCAC4C,OAD5C;AAAA,UACqDP,MADrD,gBACqDA,MADrD;AAGP,0BACE,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAE,aAAAsB,IAAG;AAAA,iBAAK,MAAI,CAACX,MAAL,GAAcW,IAAnB;AAAA;AAAhB,sBACE,oBAAC,IAAD,qBACE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,IAAI,EAAE,MAFR;AAGE,QAAA,KAAK,EAAE,YAHT;AAIE,QAAA,KAAK,EAAEf,IAJT;AAKE,QAAA,OAAO,EAAE,CACP;AAAEgB,UAAAA,EAAE,EAAE,SAAN;AAAiBC,UAAAA,KAAK,EAAE;AAAxB,SADO,EAEP;AAAED,UAAAA,EAAE,EAAE,KAAN;AAAaC,UAAAA,KAAK,EAAE;AAApB,SAFO,EAGP;AAAED,UAAAA,EAAE,EAAE,OAAN;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAHO,EAIP;AAAED,UAAAA,EAAE,EAAE,OAAN;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAJO,CALX;AAWE,QAAA,QAAQ,EAAE,KAAKC;AAXjB,QADF,EAcGlB,IAAI,IAAI,OAAR,IAAmBP,MAAnB,gBACC,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,KAAK,EAAE,OAFT;AAGE,QAAA,IAAI,EAAE,QAHR;AAIE,QAAA,KAAK,EAAEA,MAAM,GAAGA,MAAM,CAAC0B,OAAV,GAAoBxB,IAJnC;AAKE,QAAA,QAAQ,EAAE,KAAKuB,YALjB;AAME,QAAA,MAAM,EAAE;AANV,QADD,GASGlB,IAAI,IAAI,OAAR,IAAmBP,MAAnB,gBACF,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,KAAK,EAAE,OAFT;AAGE,QAAA,IAAI,EAAE,QAHR;AAIE,QAAA,KAAK,EAAEA,MAAM,GAAGA,MAAM,CAAC0B,OAAV,GAAoBxB,IAJnC;AAKE,QAAA,QAAQ,EAAE,KAAKuB,YALjB;AAME,QAAA,MAAM,EAAE;AANV,QADE,gBAUF,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,MADR;AAEE,QAAA,KAAK,EAAElB,IAAI,IAAI,KAAR,GAAgB,SAAhB,GAA4BA,IAAI,IAAI,SAAR,GAAoB,aAApB,GAAoC,MAFzE;AAGE,QAAA,IAAI,EAAE,MAHR;AAIE,QAAA,KAAK,EAAEL,IAJT;AAKE,QAAA,QAAQ,EAAE,KAAKuB;AALjB,QAjCJ,eA0CE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,KAAK,EAAE,UAFT;AAGE,QAAA,IAAI,EAAE,UAHR;AAIE,QAAA,KAAK,EAAEjB,QAJT;AAKE,QAAA,WAAW,EAAE,GALf;AAME,QAAA,QAAQ,EAAE,KAAKiB;AANjB,QA1CF,eAkDE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,MADR;AAEE,QAAA,KAAK,EAAE,OAFT;AAGE,QAAA,IAAI,EAAE,OAHR;AAIE,QAAA,KAAK,EAAEpB,KAJT;AAKE,QAAA,WAAW,EAAE,iBALf;AAME,QAAA,QAAQ,EAAE,KAAKoB;AANjB,QAlDF,eA0DE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,UADR;AAEE,QAAA,KAAK,EAAE,aAFT;AAGE,QAAA,IAAI,EAAE,aAHR;AAIE,QAAA,KAAK,EAAEnB,WAJT;AAKE,QAAA,WAAW,EAAE,8BALf;AAME,QAAA,QAAQ,EAAE,KAAKmB;AANjB,QA1DF,CADF,eAoEE,oBAAC,WAAD,qBACE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,MAAd;AAAsB,QAAA,KAAK,EAAE,SAA7B;AAAwC,QAAA,OAAO,EAAE,KAAKE;AAAtD,QADF,eAEE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,QAAd;AAAwB,QAAA,KAAK,EAAE,SAA/B;AAA0C,QAAA,OAAO,EAAE,KAAKd;AAAxD,QAFF,CApEF,CADF;AA2ED;;;;EArK2B1B,KAAK,CAACyC,S;;AAwKpC,eAAe/B,eAAf","sourcesContent":["import React from 'react'\nimport _ from 'lodash'\n\nimport Dialog from '../Dialog'\nimport { Form, Input, Button, ButtonGroup } from '../Form'\n\nimport { getSlide, addSlide, updateSlide } from '../../actions/slide'\n\nclass SlideEditDialog extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      upload: props.upload,\n      ...(props.upload ? { type:'video'} : {})\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.upload != prevProps.upload) {\n      this.setState({\n        upload: this.props.upload,\n        ...(this.props.upload ? {} : {})\n      })\n    }\n  }\n\n  refresh = () => {\n    const { slide, upload } = this.props\n    if (slide) {\n      return getSlide(slide).then(data => {\n        this.setState({\n          data: undefined,\n          title: undefined,\n          description: undefined,\n          type: undefined,\n          duration: undefined,\n          ...data,\n          upload,\n          ...(upload ? { type:'video'} : {})\n        })\n      })\n    } else {\n      this.setState({\n        data: undefined,\n        title: undefined,\n        description: undefined,\n        type: undefined,\n        duration: undefined,\n        upload,\n        ...(upload ? { type:'video' } : {})\n      })\n      return Promise.resolve()\n    }\n  }\n\n\n  open = () => {\n    this.refresh()\n    this.dialog && this.dialog.open()\n  }\n\n  close = () => {\n    const { refresh } = this.props\n    this.dialog && this.dialog.close()\n    if (refresh) return refresh()\n    return Promise.resolve()\n  }\n\n  handleChange = (name, value) => {\n    this.setState({\n      [name]: value,\n      // Clean up data if the type of slide changed\n      ...(name == 'type' ? { data: '' } : {})\n    })\n  }\n\n  save = () => {\n    const { slide, slideshow } = this.props\n    const { upload, ...otherProps } = this.state\n    if (slideshow) {\n      return addSlide(slideshow, upload, _.pickBy(otherProps, v => v !== undefined)).then(() => {\n        this.close()\n      })\n    } else {\n      return updateSlide(slide, upload, _.pickBy(otherProps, v => v !== undefined)).then(() => {\n        this.close()\n      })\n    }\n  }\n\n  render() {\n    const { data, title, description, duration, type = 'video', upload } = this.state\n\n    return (\n      <Dialog ref={ref => (this.dialog = ref)}>\n        <Form>\n          <Input\n            type={'select'}\n            name={'type'}\n            label={'Slide Type'}\n            value={type}\n            choices={[\n              { id: 'youtube', label: 'Youtube Video' },\n              { id: 'web', label: 'Web Page' },\n              { id: 'photo', label: 'Photo' },\n              { id: 'video', label: 'video'}\n            ]}\n            onChange={this.handleChange}\n          />\n          {type == 'photo' || upload ? (\n            <Input\n              type={'photo'}\n              label={'photo'}\n              name={'upload'}\n              value={upload ? upload.preview : data}\n              onChange={this.handleChange}\n              inline={true}\n            />\n          ) : type == 'video' || upload ? (\n            <Input\n              type={'video'}\n              label={'video'}\n              name={'upload'}\n              value={upload ? upload.preview : data}\n              onChange={this.handleChange}\n              inline={true}\n            />\n          ) : (\n            <Input\n              type={'text'}\n              label={type == 'web' ? 'Web URL' : type == 'youtube' ? 'Youtube URL' : 'Data'}\n              name={'data'}\n              value={data}\n              onChange={this.handleChange}\n            />\n          )\n        }\n          <Input\n            type={'number'}\n            label={'Duration'}\n            name={'duration'}\n            value={duration}\n            placeholder={'5'}\n            onChange={this.handleChange}\n          />\n          <Input\n            type={'text'}\n            label={'Title'}\n            name={'title'}\n            value={title}\n            placeholder={'Header title...'}\n            onChange={this.handleChange}\n          />\n          <Input\n            type={'textarea'}\n            label={'Description'}\n            name={'description'}\n            value={description}\n            placeholder={'Short content description...'}\n            onChange={this.handleChange}\n          />\n        </Form>\n        <ButtonGroup>\n          <Button text={'Save'} color={'#8bc34a'} onClick={this.save} />\n          <Button text={'Cancel'} color={'#e85454'} onClick={this.close} />\n        </ButtonGroup>\n      </Dialog>\n    )\n  }\n}\n\nexport default SlideEditDialog\n"]},"metadata":{},"sourceType":"module"}