{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @fileoverview Slideshow component that given an array of slide descriptions\n * of mixed types, renders the slides and automatically plays the slideshow for\n * the given durations\n */\nimport React, { Component } from 'react';\nimport { config } from '@fortawesome/fontawesome-svg-core';\nimport getVideoId from 'get-video-id';\nimport YouTube from 'react-youtube';\nconfig.autoAddCss = false;\nvar DEFAULT_COLOR = '#95a5a6';\nvar DEFAULT_URL = 'https://www.youtube.com/watch?v=9xwazD5SyVg';\n\nvar YoutubeContent = /*#__PURE__*/function (_Component) {\n  _inherits(YoutubeContent, _Component);\n\n  var _super = _createSuper(YoutubeContent);\n\n  function YoutubeContent(props) {\n    var _this;\n\n    _classCallCheck(this, YoutubeContent);\n\n    _this = _super.call(this, props);\n    _this.iframe = React.createRef();\n    return _this;\n  }\n\n  _createClass(YoutubeContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$data = this.props.data;\n      _this$props$data = _this$props$data === void 0 ? {} : _this$props$data;\n      var title = _this$props$data.title,\n          _this$props$data$url = _this$props$data.url,\n          url = _this$props$data$url === void 0 ? DEFAULT_URL : _this$props$data$url,\n          _this$props$data$colo = _this$props$data.color,\n          color = _this$props$data$colo === void 0 ? DEFAULT_COLOR : _this$props$data$colo;\n\n      var _getVideoId = getVideoId(url),\n          id = _getVideoId.id,\n          service = _getVideoId.service;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"930190573\", [color]]]) + \" \" + 'youtube'\n      }, title && /*#__PURE__*/React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"930190573\", [color]]]) + \" \" + 'titleConainer'\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"930190573\", [color]]]) + \" \" + 'title'\n      }, title)), /*#__PURE__*/React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"930190573\", [color]]]) + \" \" + 'iframeContainer'\n      }, !id || service !== 'youtube' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"930190573\", [color]]])\n      }, \"Invalid Youtube URL\") : /*#__PURE__*/React.createElement(YouTube, {\n        containerClassName: 'youtube-container-nojsx',\n        videoId: id,\n        opts: {\n          /* eslint-disable camelcase */\n          height: '100%',\n          width: '100%',\n          playerVars: {\n            autoplay: 1,\n            controls: 0,\n            start: 0,\n            cc_load_policy: 0,\n            fs: 0,\n            iv_load_policy: 3,\n            modestbranding: 1,\n            rel: 0,\n            showinfo: 0\n          }\n          /* eslint-enable camelcase */\n\n        }\n      })), /*#__PURE__*/React.createElement(\"style\", null, \"\\n                .youtube-container-nojsx {\\n                  width: 100%;\\n                  height: 100%;\\n                  min-height: 100%;\\n                }\\n              \"), /*#__PURE__*/React.createElement(_JSXStyle, {\n        id: \"930190573\",\n        dynamic: [color]\n      }, \".youtube.__jsx-style-dynamic-selector{position:relative;box-sizing:border-box;height:100%;width:100%;background:\".concat(color, \";-webkit-flex:1;-ms-flex:1;flex:1;font-family:'Open Sans',sans-serif;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.youtube.__jsx-style-dynamic-selector .iframeContainer.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;border:none;overflow:hidden;}.youtube.__jsx-style-dynamic-selector .iframe.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;border:none;width:100%;height:100%;}.youtube.__jsx-style-dynamic-selector .titleConainer.__jsx-style-dynamic-selector{padding:12px;}.youtube.__jsx-style-dynamic-selector .title.__jsx-style-dynamic-selector{font-family:'Open Sans',sans-serif;border-left:3px solid rgba(255,255,255,0.5);font-size:16px;padding-left:12px;font-weight:600;text-transform:uppercase;z-index:1;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcdXNlclxcRGVza3RvcFxcZGlnaXRhbHNpZ25hZ2UtbWFzdGVyXFx3aWRnZXRzXFx5b3V0dWJlXFxzcmNcXFlvdXR1YmVDb250ZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFFVyxBQUdpQyxBQVdYLEFBS0EsQUFNTSxBQUd1QixhQUZ0QyxLQXRCd0IsZUFXVixBQUtBLEVBU21DLEtBeEJuQyxLQVdJLEFBS0wsT0FmQSxJQWdCQyxLQUxkLEVBVjBDLEtBZ0IxQyxXQU9pQixlQUNHLFNBdkJYLFNBd0JTLGdCQUNTLFFBeEJXLGlCQXlCMUIsVUFDWixRQXpCZSwwRUFDUyw4RUFDeEIiLCJmaWxlIjoiQzpcXFVzZXJzXFx1c2VyXFxEZXNrdG9wXFxkaWdpdGFsc2lnbmFnZS1tYXN0ZXJcXHdpZGdldHNcXHlvdXR1YmVcXHNyY1xcWW91dHViZUNvbnRlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgU2xpZGVzaG93IGNvbXBvbmVudCB0aGF0IGdpdmVuIGFuIGFycmF5IG9mIHNsaWRlIGRlc2NyaXB0aW9uc1xuICogb2YgbWl4ZWQgdHlwZXMsIHJlbmRlcnMgdGhlIHNsaWRlcyBhbmQgYXV0b21hdGljYWxseSBwbGF5cyB0aGUgc2xpZGVzaG93IGZvclxuICogdGhlIGdpdmVuIGR1cmF0aW9uc1xuICovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSdcbmltcG9ydCBnZXRWaWRlb0lkIGZyb20gJ2dldC12aWRlby1pZCdcbmltcG9ydCBZb3VUdWJlIGZyb20gJ3JlYWN0LXlvdXR1YmUnXG5cbmNvbmZpZy5hdXRvQWRkQ3NzID0gZmFsc2VcblxuY29uc3QgREVGQVVMVF9DT0xPUiA9ICcjOTVhNWE2J1xuY29uc3QgREVGQVVMVF9VUkwgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05eHdhekQ1U3lWZydcblxuY2xhc3MgWW91dHViZUNvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuaWZyYW1lID0gUmVhY3QuY3JlYXRlUmVmKClcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRhdGE6IHsgdGl0bGUsIHVybCA9IERFRkFVTFRfVVJMLCBjb2xvciA9IERFRkFVTFRfQ09MT1IgfSA9IHt9IH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBpZCwgc2VydmljZSB9ID0gZ2V0VmlkZW9JZCh1cmwpXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSd5b3V0dWJlJz5cbiAgICAgICAge3RpdGxlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGl0bGVDb25haW5lcic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGl0bGUnPnt0aXRsZX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2lmcmFtZUNvbnRhaW5lcic+XG4gICAgICAgICAgeyFpZCB8fCBzZXJ2aWNlICE9PSAneW91dHViZScgPyAoXG4gICAgICAgICAgICA8ZGl2PkludmFsaWQgWW91dHViZSBVUkw8L2Rpdj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFlvdVR1YmVcbiAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3NOYW1lPXsneW91dHViZS1jb250YWluZXItbm9qc3gnfVxuICAgICAgICAgICAgICB2aWRlb0lkPXtpZH1cbiAgICAgICAgICAgICAgb3B0cz17e1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDEsXG4gICAgICAgICAgICAgICAgICBjb250cm9sczogMCxcbiAgICAgICAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgICAgICAgY2NfbG9hZF9wb2xpY3k6IDAsXG4gICAgICAgICAgICAgICAgICBmczogMCxcbiAgICAgICAgICAgICAgICAgIGl2X2xvYWRfcG9saWN5OiAzLFxuICAgICAgICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDEsXG4gICAgICAgICAgICAgICAgICByZWw6IDAsXG4gICAgICAgICAgICAgICAgICBzaG93aW5mbzogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgIHtgXG4gICAgICAgICAgICAgICAgLnlvdXR1YmUtY29udGFpbmVyLW5vanN4IHtcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDxzdHlsZSBqc3g+XG4gICAgICAgICAge2BcbiAgICAgICAgICAgIC55b3V0dWJlIHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2NvbG9yfTtcbiAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnlvdXR1YmUgLmlmcmFtZUNvbnRhaW5lciB7XG4gICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC55b3V0dWJlIC5pZnJhbWUge1xuICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAueW91dHViZSAudGl0bGVDb25haW5lciB7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAueW91dHViZSAudGl0bGUge1xuICAgICAgICAgICAgICBmb250LWZhbWlseTogJ09wZW4gU2FucycsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTJweDtcbiAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFlvdXR1YmVDb250ZW50XG4iXX0= */\\n/*@ sourceURL=C:\\\\Users\\\\user\\\\Desktop\\\\digitalsignage-master\\\\widgets\\\\youtube\\\\src\\\\YoutubeContent.js */\")));\n    }\n  }]);\n\n  return YoutubeContent;\n}(Component);\n\nexport default YoutubeContent;","map":{"version":3,"sources":["C:/Users/user/Desktop/digitalsignage-master/widgets/youtube/src/YoutubeContent.js"],"names":["React","Component","config","getVideoId","YouTube","autoAddCss","DEFAULT_COLOR","DEFAULT_URL","YoutubeContent","props","iframe","createRef","data","title","url","color","id","service","height","width","playerVars","autoplay","controls","start","cc_load_policy","fs","iv_load_policy","modestbranding","rel","showinfo"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEAF,MAAM,CAACG,UAAP,GAAoB,KAApB;AAEA,IAAMC,aAAa,GAAG,SAAtB;AACA,IAAMC,WAAW,GAAG,6CAApB;;IAEMC,c;;;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,MAAL,GAAcV,KAAK,CAACW,SAAN,EAAd;AAFiB;AAGlB;;;;6BAEQ;AAAA,6BACoE,KAAKF,KADzE,CACCG,IADD;AAAA,uDAC6D,EAD7D;AAAA,UACSC,KADT,oBACSA,KADT;AAAA,kDACgBC,GADhB;AAAA,UACgBA,GADhB,qCACsBP,WADtB;AAAA,mDACmCQ,KADnC;AAAA,UACmCA,KADnC,sCAC2CT,aAD3C;;AAAA,wBAEiBH,UAAU,CAACW,GAAD,CAF3B;AAAA,UAECE,EAFD,eAECA,EAFD;AAAA,UAEKC,OAFL,eAEKA,OAFL;;AAGP,0BACE;AAAA,qDAiDsBF,KAjDtB,aAAe;AAAf,SACGF,KAAK,iBACJ;AAAA,qDA+CkBE,KA/ClB,aAAe;AAAf,sBACE;AAAA,qDA8CgBA,KA9ChB,aAAe;AAAf,SAAwBF,KAAxB,CADF,CAFJ,eAME;AAAA,qDA2CoBE,KA3CpB,aAAe;AAAf,SACG,CAACC,EAAD,IAAOC,OAAO,KAAK,SAAnB,gBACC;AAAA,qDAyCgBF,KAzChB;AAAA,+BADD,gBAGC,oBAAC,OAAD;AACE,QAAA,kBAAkB,EAAE,yBADtB;AAEE,QAAA,OAAO,EAAEC,EAFX;AAGE,QAAA,IAAI,EAAE;AACJ;AACAE,UAAAA,MAAM,EAAE,MAFJ;AAGJC,UAAAA,KAAK,EAAE,MAHH;AAIJC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE,CADA;AAEVC,YAAAA,QAAQ,EAAE,CAFA;AAGVC,YAAAA,KAAK,EAAE,CAHG;AAIVC,YAAAA,cAAc,EAAE,CAJN;AAKVC,YAAAA,EAAE,EAAE,CALM;AAMVC,YAAAA,cAAc,EAAE,CANN;AAOVC,YAAAA,cAAc,EAAE,CAPN;AAQVC,YAAAA,GAAG,EAAE,CARK;AASVC,YAAAA,QAAQ,EAAE;AATA;AAWZ;;AAfI;AAHR,QAJJ,CANF,eAiCE,2NAjCF;AAAA;AAAA,kBAiDsBd,KAjDtB;AAAA,mIAiDsBA,KAjDtB,k0LADF;AAmFD;;;;EA5F0Bd,S;;AA+F7B,eAAeO,cAAf","sourcesContent":["/**\n * @fileoverview Slideshow component that given an array of slide descriptions\n * of mixed types, renders the slides and automatically plays the slideshow for\n * the given durations\n */\n\nimport React, { Component } from 'react'\nimport { config } from '@fortawesome/fontawesome-svg-core'\nimport getVideoId from 'get-video-id'\nimport YouTube from 'react-youtube'\n\nconfig.autoAddCss = false\n\nconst DEFAULT_COLOR = '#95a5a6'\nconst DEFAULT_URL = 'https://www.youtube.com/watch?v=9xwazD5SyVg'\n\nclass YoutubeContent extends Component {\n  constructor(props) {\n    super(props)\n    this.iframe = React.createRef()\n  }\n\n  render() {\n    const { data: { title, url = DEFAULT_URL, color = DEFAULT_COLOR } = {} } = this.props\n    const { id, service } = getVideoId(url)\n    return (\n      <div className='youtube'>\n        {title && (\n          <div className='titleConainer'>\n            <div className='title'>{title}</div>\n          </div>\n        )}\n        <div className='iframeContainer'>\n          {!id || service !== 'youtube' ? (\n            <div>Invalid Youtube URL</div>\n          ) : (\n            <YouTube\n              containerClassName={'youtube-container-nojsx'}\n              videoId={id}\n              opts={{\n                /* eslint-disable camelcase */\n                height: '100%',\n                width: '100%',\n                playerVars: {\n                  autoplay: 1,\n                  controls: 0,\n                  start: 0,\n                  cc_load_policy: 0,\n                  fs: 0,\n                  iv_load_policy: 3,\n                  modestbranding: 1,\n                  rel: 0,\n                  showinfo: 0\n                }\n                /* eslint-enable camelcase */\n              }}\n            />\n          )}\n        </div>\n        <style>\n          {`\n                .youtube-container-nojsx {\n                  width: 100%;\n                  height: 100%;\n                  min-height: 100%;\n                }\n              `}\n        </style>\n        <style jsx>\n          {`\n            .youtube {\n              position: relative;\n              box-sizing: border-box;\n              height: 100%;\n              width: 100%;\n              background: ${color};\n              flex: 1;\n              font-family: 'Open Sans', sans-serif;\n              display: flex;\n              flex-direction: column;\n            }\n            .youtube .iframeContainer {\n              flex: 1;\n              border: none;\n              overflow: hidden;\n            }\n            .youtube .iframe {\n              flex: 1;\n              border: none;\n              width: 100%;\n              height: 100%;\n            }\n            .youtube .titleConainer {\n              padding: 12px;\n            }\n            .youtube .title {\n              font-family: 'Open Sans', sans-serif;\n              border-left: 3px solid rgba(255, 255, 255, 0.5);\n              font-size: 16px;\n              padding-left: 12px;\n              font-weight: 600;\n              text-transform: uppercase;\n              z-index: 1;\n            }\n          `}\n        </style>\n      </div>\n    )\n  }\n}\n\nexport default YoutubeContent\n"]},"metadata":{},"sourceType":"module"}