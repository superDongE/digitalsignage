{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/**\n * @fileoverview Slide component that given a slide type and its data renders it\n * along with its title and description.\n */\nimport GenericSlide from './Generic';\n\nvar WebSlide = /*#__PURE__*/function (_GenericSlide) {\n  _inherits(WebSlide, _GenericSlide);\n\n  var _super = _createSuper(WebSlide);\n\n  function WebSlide(props) {\n    var _this;\n\n    _classCallCheck(this, WebSlide);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"stop\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"play\", function () {});\n\n    return _this;\n  }\n\n  _createClass(WebSlide, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.state.loading.resolve();\n    }\n    /**\n     * Renders the inner content of the slide (ex. the photo, youtube iframe, etc)\n     * @param {string} data The slide's data (usually a URL or object ID)\n     * @returns {Component}\n     */\n\n  }, {\n    key: \"renderSlideContent\",\n    value: function renderSlideContent(data) {\n      return /*#__PURE__*/React.createElement(\"iframe\", {\n        width: \"100%\",\n        height: \"100%\",\n        src: data,\n        frameborder: \"0\",\n        allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n        allowfullscreen: true\n      });\n    }\n    /**\n     * Stops the slide's content from playing when the slide is out of focus\n     */\n\n  }]);\n\n  return WebSlide;\n}(GenericSlide);\n\nexport default WebSlide;","map":{"version":3,"sources":["C:/Users/82103/Desktop/digitalsignage-master/widgets/slideshow/src/Slide/Web.js"],"names":["GenericSlide","WebSlide","props","state","loading","resolve","data"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAKA,OAAOA,YAAP,MAAyB,WAAzB;;IAEMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,2DA6BZ,YAAM,CAAE,CA7BI;;AAAA,2DAkCZ,YAAM,CAAE,CAlCI;;AAAA;AAElB;;;;wCAEmB;AAClB,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB;AACD;AAED;;;;;;;;uCAKmBC,I,EAAM;AACvB,0BACE;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,MAAM,EAAC,MAFT;AAGE,QAAA,GAAG,EAAEA,IAHP;AAIE,QAAA,WAAW,EAAC,GAJd;AAKE,QAAA,KAAK,EAAC,yEALR;AAME,QAAA,eAAe;AANjB,QADF;AAUD;AAED;;;;;;;EA3BqBN,Y;;AAsCvB,eAAeC,QAAf","sourcesContent":["/**\n * @fileoverview Slide component that given a slide type and its data renders it\n * along with its title and description.\n */\n\nimport GenericSlide from './Generic'\n\nclass WebSlide extends GenericSlide {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    this.state.loading.resolve()\n  }\n\n  /**\n   * Renders the inner content of the slide (ex. the photo, youtube iframe, etc)\n   * @param {string} data The slide's data (usually a URL or object ID)\n   * @returns {Component}\n   */\n  renderSlideContent(data) {\n    return (\n      <iframe\n        width='100%'\n        height='100%'\n        src={data}\n        frameborder='0'\n        allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\n        allowfullscreen\n      />\n    )\n  }\n\n  /**\n   * Stops the slide's content from playing when the slide is out of focus\n   */\n  stop = () => {}\n\n  /**\n   * Starts or resumes the slide's content when the slide is in focus\n   */\n  play = () => {}\n}\n\nexport default WebSlide\n"]},"metadata":{},"sourceType":"module"}